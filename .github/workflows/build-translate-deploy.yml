name: Build, Translate & Deploy

on:
  push:
    branches: ['main']
    paths:
      - 'content/**/*.md'
      - 'app/**'
      - 'nuxt.config.ts'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: ['main']
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}

jobs:
  build-translate-deploy:
    runs-on: ubuntu-latest
    environment: NuxtHub
    
    # Skip if commit was made by a bot to prevent infinite loops
    if: github.actor != 'github-actions[bot]'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      # Translation Step
      - name: Check for content changes
        id: content-changes
        run: |
          # Check if any content files were changed - exclude French files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '^content/(articles|projects|pages)/[^/]*\.md$' | grep -v '/fr/' || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "content_changed=true" >> $GITHUB_OUTPUT
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "Content files changed: $CHANGED_FILES"
          else
            echo "content_changed=false" >> $GITHUB_OUTPUT
            echo "No content files changed"
          fi

      - name: Check commit message for translation keywords
        id: check-commit
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          # Check for translation keywords (case insensitive)
          if echo "$COMMIT_MSG" | grep -i -E '\[translate\]|\[retranslate\]|\[force-translate\]|translate:force|retranslate'; then
            echo "force_translate=true" >> $GITHUB_OUTPUT
            echo "üîÑ Translation keywords detected in commit message"
          else
            echo "force_translate=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No translation keywords found"
          fi

      - name: Run translations
        if: steps.content-changes.outputs.content_changed == 'true' || steps.check-commit.outputs.force_translate == 'true'
        run: |
          echo "üåê Running translations..."
          
          if [ "${{ steps.check-commit.outputs.force_translate }}" = "true" ]; then
            echo "üîÑ Force translating all content..."
            pnpm translate all --force
          else
            echo "üìù Translating changed files..."
            pnpm translate changed ${{ steps.content-changes.outputs.changed_files }}
          fi

      - name: Check for translation changes
        id: translation-changes
        run: |
          # Check if any French translation files were created or modified
          if git diff --quiet HEAD content/*/fr/; then
            echo "No translation changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Translation changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Show what changed
            echo "üìã Translation changes:"
            git diff --name-only HEAD content/*/fr/ || true
          fi

      - name: Create PR for translation changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.translation-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get the current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Get the list of changed files to use in branch name
          CHANGED_FILES=$(git diff --name-only HEAD content/*/fr/ | head -n 1)
          FILE_NAME=$(basename "$CHANGED_FILES" | sed 's/\..*//')
          
          # Create a branch name with the file name and date
          BRANCH_NAME="translation/$FILE_NAME-$CURRENT_DATE"
          
          # Create a new branch
          git checkout -b "$BRANCH_NAME"
          
          git add content/*/fr/
          
          COMMIT_MSG="ü§ñ Auto-translate content"
          if [ "${{ steps.check-commit.outputs.force_translate }}" = "true" ]; then
            COMMIT_MSG="$COMMIT_MSG (forced)"
          fi
          
          # Commit changes
          git commit -m "$COMMIT_MSG

          Details:
            - Content changed: ${{ steps.content-changes.outputs.content_changed }}
            - Force translation: ${{ steps.check-commit.outputs.force_translate }}
            - Files: ${{ steps.content-changes.outputs.changed_files }}
            
            [skip ci]"
          
          # Push the new branch
          git push origin "$BRANCH_NAME"
          
          # Create a PR from the new branch to main
          echo "Creating PR from $BRANCH_NAME to main"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{\"title\":\"[Automated] Translation for $FILE_NAME ($CURRENT_DATE)\",\"head\":\"$BRANCH_NAME\",\"base\":\"main\",\"body\":\"ü§ñ Automated translation update for $FILE_NAME.\n\n**Details:**\n- Files: ${{ steps.content-changes.outputs.changed_files }}\n- Force Translation: ${{ steps.check-commit.outputs.force_translate }}\n\n‚ö†Ô∏è **Please review the translations before merging to avoid deploying incorrect content to production.**\"}"

      # Ensure we're back on main branch before deployment
      - name: Switch back to main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Current branch: $(git branch --show-current)"
          git checkout main
          echo "Switched to branch: $(git branch --show-current)"
          echo "Latest commit on main: $(git log -1 --oneline)"

      # Build & Deploy Step - ONLY on main branch pushes (not PRs)
      - name: Deploy with nuxt-hub cli
        run: npx nuxthub deploy
        env:
          NUXT_HUB_PROJECT_KEY: ${{ secrets.NUXT_HUB_PROJECT_KEY}}
          NUXT_HUB_USER_TOKEN: ${{ secrets.NUXT_HUB_USER_TOKEN }}

      - name: Final status
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [ "${{ steps.translation-changes.outputs.has_changes }}" = "true" ]; then
              echo "üéâ Translation PR created & Deployment completed!"
              echo "üìä Summary:"
              echo "  - Content changed: ${{ steps.content-changes.outputs.content_changed }}"
              echo "  - Force translation: ${{ steps.check-commit.outputs.force_translate }}"
              echo "  - Translation changes: ${{ steps.translation-changes.outputs.has_changes }}"
              echo "  - Translation PR: ‚úÖ Created (requires review)"
              echo "  - Deployment: ‚úÖ Completed"
            else
              echo "üéâ Deployment completed!"
              echo "üìä Summary:"
              echo "  - Content changed: ${{ steps.content-changes.outputs.content_changed }}"
              echo "  - Translation changes: ${{ steps.translation-changes.outputs.has_changes }}"
              echo "  - Deployment: ‚úÖ Completed"
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üéâ PR validation completed!"
            echo "üìä Summary:"
            echo "  - Content changed: ${{ steps.content-changes.outputs.content_changed }}"
            echo "  - Force translation: ${{ steps.check-commit.outputs.force_translate }}"
            echo "  - Translation changes: ${{ steps.translation-changes.outputs.has_changes }}"
            echo "  - Deployment: ‚è∏Ô∏è Skipped (PR mode)"
          fi
